{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template datafield_harpiainteraction/harpiainteraction

    The purpose of this template is to enable the user to define an harpiainteraction field.

    Classes required for JS:
    * none

    Data attributes required for JS:
    * none

    Context variables required for this template:
    * name string The field's name.
    * description string The field's description.
    * required bool The field's requiredness.
    * param1 string The selected answer provider's name.
    * param2 string The selected experiment type ("single" or "chat").
    * param3 string The system prompt.

    Example context (json):
    {
        "name": "A name",
        "description": "A description",
        "required": true,
        "param1": "a model name",
        "param2": "single",
        "param3": "You are an assistant. Answer concisely.",
    }
}}

<fieldset>
    {{> mod_data/fields/basicfields }}
    {{> mod_data/fields/requiredfield }}

    <!-- Answer provider --> 
    <div class="form-group row fitem">
        <div class="col-md-3 col-form-label d-flex pb-0 pe-md-0">
            <label for="provider-name-input">{{#str}}providername, datafield_harpiainteraction{{/str}}</label>
        </div>
        <div class="col-md-9 form-inline align-items-start felement">
            
            {{#providers.0}}
                <select class="form-control" name="param1" id="provider-name-input" data-initial-value="{{param1}}">
                <option value="" id="provider-name-nooption"></option>
                {{#providers}}
                    <option value="{{name}}" data-initial-value="{{param1}}"
                        data-default-system-prompt="{{default_system_prompt}}"
                        data-supports-system-prompt="{{supports_system_prompt}}">
                        {{name}}
                    </option>
                {{/providers}}
                </select>
            {{/providers.0}}
            
            {{^providers}}
                <input class="form-control"  name="param1" id="provider-name-input" type="text" readonly value="{{param1}}">
                <div class="errorbox alert alert-danger">
                  {{#str}}cantfetchproviders, datafield_harpiainteraction{{/str}}
                </div>
            {{/providers}}
        </div>
    </div>

    <!-- Experiment type -->
    <div class="form-group row fitem">
        <div class="col-md-3 col-form-label d-flex pb-0 pe-md-0">
            <label for="experiment-type-input">{{#str}}experimenttype, datafield_harpiainteraction{{/str}}</label>
        </div>
        <div class="col-md-9 form-inline align-items-start felement">
            <select class="form-control" name="param2" id="experiment-type-input" data-initial-value="{{param2}}">
                <option value="" id="experiment-type-nooption"></option>
                <option value="single">{{#str}}experimenttype_single, datafield_harpiainteraction{{/str}}</option>
                <option value="chat">{{#str}}experimenttype_chat, datafield_harpiainteraction{{/str}}</option>
            </select>
        </div>
    </div>
    
    <!-- System prompt --> 
    <div class="form-group row fitem hidden" id="system-prompt-row" >
        <div class="col-md-3 col-form-label d-flex pb-0 pe-md-0">
            <label for="system-prompt-input">{{#str}}systemprompt, datafield_harpiainteraction{{/str}}</label>
        </div>
        <div class="col-md-9 form-inline align-items-start felement">
            <textarea class="form-control" name="param3" id="system-prompt-input" >{{param3}}</textarea>
        </div>
    </div>


</fieldset>
{{#js}}
    const answerProviders = document.getElementById('provider-name-input');
    const systemPromptInput = document.getElementById('system-prompt-input');
    const systemPromptRow = document.getElementById('system-prompt-row');
    const expTypeSelect = document.getElementById('experiment-type-input');

    if (answerProviders.tagName.toLowerCase() == "select") {
        answerProviders.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            let supportsPrompt = true;
            if (selectedOption) {
                systemPromptInput.setAttribute('placeholder', selectedOption.getAttribute('data-default-system-prompt'));
                supportsPrompt = Boolean(parseInt(selectedOption.getAttribute('data-supports-system-prompt')));
            }
            systemPromptRow.classList[supportsPrompt ? 'remove' : 'add']('hidden');
            if (!supportsPrompt) {
                // System prompt not supported: hide field, clear it, but preserve its value
                // (if the user submits the form with a provider that does not support
                //  system prompts, the value will be empty; but if the user changes
                //  back to a model that supports system prompts before submitting,
                //  the value will be restored)
                systemPromptRow.classList.add('hidden');
                if (systemPromptInput.value)
                    systemPromptInput.setAttribute('data-saved-value', systemPromptInput.value);
                systemPromptInput.value = '';
            } else {
                // System prompt supported: show field and restore value (if any)
                const prevValue = systemPromptInput.getAttribute('data-saved-value') || '';
                if (prevValue)
                    systemPromptInput.value = systemPromptInput.getAttribute('data-saved-value') || '';
                systemPromptRow.classList.remove('hidden');
            }
        });
        answerProviders.value = answerProviders.getAttribute("data-initial-value");
        answerProviders.dispatchEvent(new Event("change"));
        document.getElementById("provider-name-nooption").remove();
    }
    
    expTypeSelect.value = expTypeSelect.getAttribute("data-initial-value");
    document.getElementById("experiment-type-nooption").remove();

    
{{/js}}